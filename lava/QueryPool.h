/**
 * Copyright (c) 2017 - 2018, Lava
 * All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

#ifndef __LAVA_QUERYPOOL__
#define __LAVA_QUERYPOOL__

#include "includes.hpp"

#include "VulkanResource.h"

#include <lava/api.h>

namespace lava
{
  class Device;
  class QueryPool : public VulkanResource, 
    public std::enable_shared_from_this< QueryPool >
  {
  public:
    LAVA_API
    QueryPool( const std::shared_ptr<Device>& device, 
      vk::QueryPoolCreateFlags flags, vk::QueryType queryType, 
      uint32_t entryCount, vk::QueryPipelineStatisticFlags pipelineStatistics );

    QueryPool( const QueryPool& rhs ) = delete;
    QueryPool& operator=( const QueryPool& rhs ) = delete;

    LAVA_API
    virtual ~QueryPool( void );

    template< typename T >
    std::vector< T > getResults( uint32_t startQuery, uint32_t queryCount,
      size_t numElems, vk::DeviceSize stride, vk::QueryResultFlags flags )
    {
      std::vector<T> data( numElems );
      static_cast<vk::Device>( *_device )
        .getQueryPoolResults< T >( _query, startQuery, queryCount, data,
          stride, flags );
      return data;
    }

    template< typename T >
    T getResult( uint32_t startQuery, size_t dataSize,
      vk::QueryResultFlags flags )
    {
      auto data = getResults<T>( startQuery, 1, dataSize, 0, flags );
      return data.at( 0 );
    }

    LAVA_API
    inline operator vk::QueryPool( void ) const
    {
      return _query;
    }

    LAVA_API
    inline vk::QueryType getQueryType( void ) const
    {
      return _queryType;
    }

  private:
    uint32_t _queryCount;
    vk::QueryPool _query;
    vk::QueryType _queryType;
  };

  /* Occlusion queries track the number of samples that pass
  the per-fragment tests for a set of drawing commands.
  The application can then use these results to inform
  future rendering decisions. */

  class OcclusionQuery : public QueryPool
  {
  public:
	explicit OcclusionQuery(std::shared_ptr<Device> device,
		uint32_t queryCount);
  };

  /* Pipeline statistics queries allow the application to sample
  a specified set of pipeline counters. These counters are
  accumulated by Vulkan for a set of either draw or dispatch commands
  while a pipeline statistics query is active. */
  class PipelineStatisticsQuery : public QueryPool
  {
  public:
	  explicit PipelineStatisticsQuery(std::shared_ptr<Device> device,
		  vk::QueryPipelineStatisticFlags pipelineStatistics);
	  vk::QueryPipelineStatisticFlags getStatisticFlags(void) const noexcept
      { return pipelineStatistics; }

  private:
	  vk::QueryPipelineStatisticFlags pipelineStatistics;
  };

  /* Timestamps provide applications with a mechanism
  for timing the execution of commands. A timestamp
  is an integer value generated by the physical device. */
  class TimestampQuery : public QueryPool
  {
  public:
	  explicit TimestampQuery(std::shared_ptr<Device> device,
		  uint32_t queryCount);
  };
}

#endif /* __LAVA_QUERYPOOL__ */