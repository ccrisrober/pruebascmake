#version 430

#define MAX_ITERATIONS 100

layout( local_size_x = 32, local_size_y = 32 ) in;
layout( binding = 0, rgba8) uniform image2D resultImage;

layout(binding = 1) uniform ubo1
{
  vec4 winSize; // = vec4( 0.0, 1.0, 0.0, 1.0 );
  int width; // = 256;
  int height; // = 256;
};

uint mandelbrot( vec2 c )
{
  vec2 z = vec2( 0.0, 0.0 );
  uint i = 0;
  while( i < MAX_ITERATIONS && (z.x * z.x + z.y * z.y) < 4.0 )
  {
    z = vec2( 
      z.x * z.x - z.y * z.y + c.x, 
      2 * z.x * z.y + c.y
    ); 
    ++i;
  }

  return i;
}

void main( )
{
  float dx = (winSize.z - winSize.x) / width; 
  float dy = (winSize.w - winSize.y) / height;

  vec2 c = vec2( dx * gl_GlobalInvocationID.x + winSize.x,
      dy * gl_GlobalInvocationID.y + winSize.y);

  uint i = mandelbrot( c ); 
  vec4 color = vec4( 0.0, 0.5, 0.5, 1.0 );
  if( i < MAX_ITERATIONS )
  {
    if( i < 5 ) color = vec4(float(i)/5.0,0,0,1);
    else if( i < 10 ) color = vec4((float(i)-5.0)/5.0, 1.0, 0.0, 1.0);
    else if( i < 15 ) color = vec4(1.0,0.0,(float(i)-10.0)/5.0,1.0);
    else color = vec4( 0.0, 0.0, 1.0, 0.0 );
  }
  else
  {
    color = vec4( 0.0, 0.0, 0.0, 1.0 );
  }

  imageStore(resultImage, ivec2( gl_GlobalInvocationID.xy ), color); 
}